{"version":3,"sources":["../src/describer.js"],"names":["_","OpenApi","cache","_items","batchGet","keys","result","k","Object","assign","batchAdd","items","item","id","describers","rds","instanceIds","options","api","create","resp","request","Action","RegionId","Items","DBInstance","map","it","DBInstanceId","description","DBInstanceDescription","slb","PageSize","LoadBalancers","LoadBalancer","LoadBalancerId","LoadBalancerName","Describer","_options","cachedIds","push","remainingIds","without","length","values","describe","descs","forEach","desc"],"mappings":"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","file":"describer.js","sourcesContent":["import _ from \"lodash\"\nimport OpenApi from './openapi' \n\nconst cache = {\n  _items: {},\n\n  batchGet(keys) {\n    let result = {}\n    for (let k of keys) {\n      if (this._items[k]) {\n        result[k] = Object.assign({}, this._items[k])\n      }\n    }\n\n    return result\n  },\n\n  batchAdd(items) {\n    for (let item of items) {\n      this._items[item.id] = Object.assign({}, item)\n    }\n  }\n}\n\nconst describers = {\n  rds: async function (instanceIds, options) {\n    let api = OpenApi.create('rds', options)\n    // Instead of query for each instance, we load all instances and cache them all\n    let resp = await api.request('GET', {\n      Action: 'DescribeDBInstances',\n      RegionId: 'cn-beijing' // TODO: remove hard-code\n    })\n\n    let items = resp.Items.DBInstance.map(it => ({\n      id: it.DBInstanceId,\n      description: it.DBInstanceDescription\n    }))\n\n    cache.batchAdd(items)\n    \n    return cache.batchGet(instanceIds)\n  },\n\n  slb: async function (instanceIds, options) {\n    let api = OpenApi.create('slb', options)\n    let resp = await api.request('GET', {\n      Action: 'DescribeLoadBalancers',\n      RegionId: 'cn-beijing',\n      PageSize: 100\n    })\n\n    let items = resp.LoadBalancers.LoadBalancer.map(it => ({\n      id: it.LoadBalancerId,\n      description: it.LoadBalancerName\n    }))\n\n    cache.batchAdd(items)\n\n    return cache.batchGet(instanceIds)\n  }\n}\n\nexport default class Describer {\n  constructor(options) {\n    this._options = options\n  }\n\n  async describe(instanceIds) {\n    let result = {}\n    let cachedIds = []\n\n    for (let id of instanceIds) {\n      if (cache[id]) {\n        result[id] = Object.assign({}, cache[id])\n        cachedIds.push(id)\n      }\n    }\n\n    let remainingIds = _.without(instanceIds, cachedIds)\n    if (remainingIds.length === 0) {\n      return result\n    }\n\n    for (let describe of Object.values(describers)) {\n      let descs = await describe(remainingIds, this._options)\n      _.forEach(descs, (desc, id) => {\n        cache[id] = desc\n        result[id] = Object.assign({}, desc)\n      })\n    }\n\n    return result\n  }\n}"]}